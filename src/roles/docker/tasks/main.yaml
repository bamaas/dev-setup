---

- name: Install Docker
  when: ansible_pkg_mgr == 'apt'
  block:
    - name: Install prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: Configure docker apt repository
      become: true
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        executable: "{{ ansible_user_shell }}"

    # - name: Load docker apt key
    #   shell: |
    #     set -o pipefail
    #     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
    #     sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    #   args:
    #     executable: "{{ ansible_user_shell }}"
    #     creates: /usr/share/keyrings/docker-archive-keyring.gpg

    # - name: Configure docker apt repository
    #   copy:
    #     dest: /etc/apt/sources.list.d/docker.list
    #     content: deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    #     mode: '0644'

    - name: Install docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
        update_cache: true

    - name: Install docker compose package
      apt:
        name:
          - docker-compose-plugin
        update_cache: true

    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/docker
        - ~{{ ansible_username }}/.docker
        - ~root/.docker

    - name: Configure docker daemon
      copy:
        dest: /etc/docker/daemon.json
        mode: '0644'
        content: |
          {
            "insecure-registries" : ["localhost:5443"]
          }

    - name: Change ownership of docker login creds folder
      file:
        path: "~{{ ansible_username }}/.docker"
        state: directory
        recurse: true
        owner: "{{ ansible_username }}"
        group: "{{ ansible_username }}"

    # - name: Start docker service
    #   shell: |
    #     set -o pipefail
    #     if [[ -z $(ps aux | grep dockerd | grep -v grep) ]]; then
    #       sudo service docker start
    #     fi
    #   args:
    #     executable: "{{ ansible_user_shell }}"

    - name: Add local user to docker group
      user:
        name: "{{ ansible_username }}"
        groups: docker
        append: true

    - name: Switch to the legacy variant of iptables
      alternatives:
        name: iptables
        path: /usr/sbin/iptables-legacy
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'

    - name: Ensure ~/.profile file exists
      file:
        path: "~{{ ansible_username }}/.profile"
        state: touch

    - name: Check whether ~/.profile contains Docker daemon startup script
      shell: set -o pipefail && (grep '# Start Docker daemon automatically when logging in if not running.' ~{{ ansible_username }}/.profile || true) | wc -l
      register: service_startup_set
      changed_when: service_startup_set.rc != 0
      args:
        executable: "{{ ansible_user_shell }}"

    - name: Start Docker daemon automatically when logging in if not running.
      shell: |
        echo '# Start Docker daemon automatically when logging in if not running.' >> ~{{ ansible_username }}/.profile
        echo 'if [[ -z $(ps aux | grep dockerd | grep -v grep) ]]; then' >> ~{{ ansible_username }}/.profile
        echo '    sudo service docker start > /dev/null 2>&1' >> ~{{ ansible_username }}/.profile
        echo 'fi' >> ~{{ ansible_username }}/.profile
      args:
        executable: "{{ ansible_user_shell }}"
      when: service_startup_set.stdout != '1'

    - name: Set docker alias
      lineinfile:
        path: "~{{ ansible_username }}/.profile"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - regexp: |
            alias d='docker '
          line: |
            alias d='docker '

    - name: Set docker compose alias
      lineinfile:
        path: "~{{ ansible_username }}/.profile"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      when: install_docker_compose
      loop:
        - regexp: |
            alias dc='docker compose '
          line: |
            alias dc='docker compose '
