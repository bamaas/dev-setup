---

- name: Install pre-requisite apt packages
  become: true
  apt:
    name:
      - bsdmainutils
      - bison
      - git
      - curl
      - mercurial
      - make
      - binutils
      - gcc
      - build-essential
  when: ansible_pkg_mgr == 'apt'

- name: Install pre-requisite homebrew packages
  become: false
  homebrew:
    name:
      - mercurial
      - bison
  when: ansible_pkg_mgr == 'homebrew'

- name: Determine whether GVM is already installed with the desired version
  shell: "set -o pipefail && (gvm version 2>/dev/null || true) | (grep 'Go Version Manager' || true) | wc -l"
  become: false
  args:
    executable: "{{ ansible_user_shell }}"
  register: gvm_installed
  changed_when: gvm_installed.rc != 0

- name: Install Go Version Manager
  when: gvm_installed.stdout != '1'
  block:
    - name: Create temporary directory for kind binary
      become: false
      tempfile:
        state: directory
        suffix: gvm
      register: tmpdir_gvm_installer

    - name: Get gvm install script
      become: false
      get_url:
        url: https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer
        dest: "{{ tmpdir_gvm_installer.path }}/gvm-installer.sh"
        mode: '0755'

    - name: Execute gvm install script
      shell: "{{ tmpdir_gvm_installer.path }}/gvm-installer.sh"
      become: false
      args:
        executable: /bin/bash

    - name: Change file ownership, group and permissions
      become: true
      file:
        path: "~{{ ansible_username }}/.gvm/pkgsets"
        owner: "{{ ansible_username }}"
        recurse: true

    - name: Ensure ~/.{{ shell_name}}rc file exists
      file:
        path: "~{{ ansible_username }}/.{{ shell_name }}rc"
        state: touch

    - name: Ensure gvm is set in ~/.{{ shell_name }}rc
      lineinfile:
        path: "~{{ ansible_username }}/.{{ shell_name }}rc"
        regexp: /.gvm/scripts/gvm
        line: |
          [[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"

  always:
    - name: Recursively remove temporary gvm installer directory
      file:
        path: "{{ tmpdir_gvm_installer.path }}"
        state: absent

  rescue:
    - name: Recursively remove temporary gvm installer directory
      file:
        path: "{{ tmpdir_gvm_installer.path }}"
        state: absent

# Work around to be able to install desired versions because directly installing from the binary fails: ERROR: Failed to download binary go
- name: Install go 1.20
  shell: "export GVM_ROOT=~{{ ansible_username }}/.gvm && ./gvm install go1.20 -B"
  args:
    executable: "{{ ansible_user_shell }}"
    chdir: "~{{ ansible_username }}/.gvm/bin"

- name: Install go versions
  shell: |
    set -o pipefail && \
    export GVM_ROOT=~{{ ansible_username }}/.gvm && \
    source $GVM_ROOT/scripts/gvm && \
    gvm use go1.20 && \
    gvm install go{{ item }}
  become: false
  loop: "{{ go_versions }}"
  args:
    executable: "{{ ansible_user_shell }}"
    chdir: "~{{ ansible_username }}/.gvm/bin"

- name: Set default Go version
  shell: |
    set -o pipefail && \
    export GVM_ROOT=~{{ ansible_username }}/.gvm && \
    source $GVM_ROOT/scripts/gvm && \
    gvm use go{{ use_go_version }} --default
  become: false
  args:
    executable: "{{ ansible_user_shell }}"

- name: Implement WSL2 path workaround for issue https://github.com/moovweb/gvm/issues/445
  lineinfile:
    path: "~{{ ansible_username }}/.{{ shell_name }}rc"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: |
        export PATH=$\(echo $PATH \| sed
      line: |
        export PATH=$(echo $PATH | sed 's/:\([^/]\)/ \1/g')
  when: ansible_distribution != 'MacOSX'

- name: Go install tools
  shell: |
    source ~{{ ansible_username }}/.gvm/scripts/gvm && \
    go install {{ item }}
  become: false
  args:
    executable: "{{ ansible_user_shell }}"
  loop: "{{ go_install }}"
